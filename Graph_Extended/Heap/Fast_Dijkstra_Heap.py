"""

		Алгоритм Дейкстры на основе кучи (Часть информации сомнительна, надо доработать)

			Для задачи кратчайшего пути с единственным истоком.

			Скорость простой реализации: O(m*n)
			Скорость реализиации на куче: O( (m+n)*log(n) )

			Как ускорить простую реализацию:
				В простой реализации каждая итерации главного цикла делает (вычисление минимума) 
				на дейкстровых оценках ребер, которые пересекают границу. Так, в простой реализации
				используется исчерпывающий поиск, который работает за время (n), 
				ПОЭТОМУ:
					Чтобы ускорить алгоритм дейкстыр надо заменить исчерпывающий поиск с временем O(n)
					на КУЧУ c временем O(log(n)).

			Реализация:

				Инвариант:
					Ключом вершины w->(V-X) является 
					МИНИМАЬНАЯ дейкстровая ОЦЕНКА ребра с хвостом v->X и головой w, 
					либо +∞, если такого ребра не существует

								key(w) = min( len(v) + l_vw ), 

								где: len(v) + l_vw - дейкстрова балльная оценка

			ПСЕВДОКОД:

				X:= пустое множество
				H:= пустая куча
				key(s):= 0

				for каждая v!=s do
						key(v) = +∞
				for каждая v->V do
		(1)			Вставить v в H // Либо исп операцию объединения в кучу

				while H явл. непустой do
		(1.1)		w*:= Извлечь минимум (H)
						добавить w* в X
						len(w*):= key(w*)
							//обновляем кучу для поддержания инварианта
		(2)			for каждое ребро (w*,y) do
								Удалить y из H
								key(y):= min{key(y), len(w*) + l_w*y}
								Вставить y в H

				Время работы:
					(1) В данной строке выполняется операция вставки - O(log(n)), 
							но такая операция выполняется для каждой вершины, т.е (n) раз,
							отсюда: Время на вставку: O(n*log(n))
							+ (1.1) Так же: O(n*log(n))

					(2) Поддержания инварианта:
							В данном цикле выполняются операции вставки и удаления,
							каждая выполняется по (m) раз, т.е всего (2m) раз.
							Время выполнения операций нам известно: O(log(n)),
							отсюда: O(m*log(n))
							(P.S. m-раз, потому что цикл по РЕБРАМ, а не вершинам)

					Итог: Время выполнения алгоритма:
						  	O(n*log(n)) + O(m*log(n)) = O( (m+n)*log(n) )


"""